from datetime import date

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.sql import insert, select

from DB.connection import Database
from DB.table_data_base import SupportMessage
from app.keyboards.support import support_inline_keyboard, select_support_inline_keyboard
from app.states import ContactingSupport

router_support = Router()

response_template = "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {support_id}\n\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {support_state}\n\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {date_the_request_was_created}\n\n–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {time_answer}\n\n–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n{user_requests}\n\n–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: \n{admin_answer}\n\n"
user_support = """üõ†Ô∏è –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ª–Ω—É—é—â–µ–º—É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—É. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞—Å—Ç –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞.

‚ùó –í–∞–∂–Ω–æ: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–ª–æ–∂–∏—Ç—å —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —è—Å–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ.

üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:

–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –Ω–∏–∂–µ.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.

–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:

–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É –∏ –æ—Ç–≤–µ—Ç.

–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.

üïì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞—è–≤–∫—É –∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üíô"""

@router_support.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_main(message: Message, state: FSMContext):
    await message.answer(user_support, reply_markup=support_inline_keyboard)


@router_support.callback_query(F.data == "contact_support")
async def contact_support(callback_data: CallbackQuery, state: FSMContext):
    await callback_data.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏—á–∏–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–í –∫—Ä–æ—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç")
    await state.set_state(ContactingSupport.UserMessage)


@router_support.message(ContactingSupport.UserMessage)
async def contact_support_start(message: Message, state: FSMContext):
    async with Database().get_session() as session:
        command = insert(SupportMessage).values(
            user_requests=message.text,
            user_telegram_id=message.from_user.id,
        )
    await session.execute(command)
    await session.commit()
    await message.delete()
    await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.\n–û–∂–∏–¥–∞–π—Ç–µ –≤–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç")
    await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=support_inline_keyboard)
    await state.set_state(None)


@router_support.callback_query(F.data == "viewing_applications")
async def viewing_applications(callback_data: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(SelectSupport = 0)

    async with Database().get_session() as session:
        result_select_complaint_quantity = await session.execute(select(SupportMessage).where(
            SupportMessage.user_telegram_id == data.get("telegram_id")
        ))
        complaint = result_select_complaint_quantity.scalars().all()
        await state.update_data(ListSupport = complaint)

    await callback_data.message.edit_text(
        text=response_template.format(
            support_id=f"`{complaint[0].id}`",
            support_state=f"`{complaint[0].application_status}`",
            date_the_request_was_created=f"`{complaint[0].date_the_request_was_created}`",
            time_answer=f"`{complaint[0].time_answer if complaint[0].time_answer  is not None else '-'}`",
            user_requests=f"`{complaint[0].user_requests}`",
            admin_answer=f"`{complaint[0].admin_answer if complaint[0].admin_answer is not None else '-'}`"
        ),
        reply_markup=select_support_inline_keyboard,
        parse_mode="Markdown"
    )



@router_support.callback_query(F.data == "next_complaint")
async def next_complaint(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    complaints = data.get("ListSupport", [])
    old_page_support = data.get("SelectSupport", 0)

    new_page_support = min(old_page_support + 1, len(complaints) - 1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
    if new_page_support != old_page_support:
        await state.update_data(SelectSupport=new_page_support)
        await edit_the_complaint(callback, state)
    else:
        await callback.answer("")


@router_support.callback_query(F.data == "previous_complaint")
async def previous_complaint(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    old_page_support = data.get("SelectSupport", 0)

    new_page_support = max(old_page_support - 1, 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
    if new_page_support != old_page_support:
        await state.update_data(SelectSupport=new_page_support)
        await edit_the_complaint(callback, state)
    else:
        await callback.answer("")




async def edit_the_complaint(callback_data: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    complaint = data["ListSupport"]
    new_page_support = data.get("SelectSupport")
    await callback_data.message.edit_text(
        text=response_template.format(
            support_id=f"`{complaint[new_page_support].id}`",
            support_state=f"`{complaint[new_page_support].application_status}`",
            date_the_request_was_created=f"`{complaint[new_page_support].date_the_request_was_created}`",
            time_answer=f"`{complaint[new_page_support].time_answer if complaint[new_page_support].time_answer  is not None else '-'}`",
            user_requests=f"`{complaint[new_page_support].user_requests}`",
            admin_answer=f"`{complaint[new_page_support].admin_answer if complaint[new_page_support].admin_answer is not None else '-'}`"
        ),
        reply_markup=select_support_inline_keyboard,
        parse_mode="Markdown"
    )
